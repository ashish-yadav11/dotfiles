#!/usr/bin/python

# adapted form:
#   https://github.com/google/gmail-oauth2-tools/blob/master/python/oauth2.py

from argparse import ArgumentParser
import json
import urllib.parse
import urllib.request
import sys


def SetupArgumentParser():
    parser = ArgumentParser()
    parser.add_argument(
            '--client_id',
            required=True,
            help='Client ID of the application that is authenticating. '
                 'See OAuth2 documentation for details.'
    )
    parser.add_argument(
            '--client_secret',
            required=True,
            help='Client secret of the application that is '
                 'authenticating. See OAuth2 documentation for '
                 'details.'
    )
    parser.add_argument(
            '--scope',
            default='https://mail.google.com/',
            help='scope for the access token. Multiple scopes can be '
                 'listed separated by spaces with the whole argument '
                 'quoted.'
    )
    parser.add_argument(
            '--refresh_token',
            help='OAuth2 refresh token'
    )
    parser.add_argument(
            '--generate_oauth2_token',
            action='store_true',
            help='generates an OAuth2 token for testing'
    )
    return parser


# The URL root for accessing Google Accounts.
GOOGLE_ACCOUNTS_BASE_URL = 'https://accounts.google.com'

# Hardcoded dummy redirect URI for non-web apps.
REDIRECT_URI = 'urn:ietf:wg:oauth:2.0:oob'


def AccountsUrl(command):
    """
    Generates the Google Accounts URL.
    Args:
        command: The command to execute.
    Returns:
        A URL for the given command.
    """
    return f"{GOOGLE_ACCOUNTS_BASE_URL}/{command}"


def UrlEscape(text):
    # See OAUTH 5.1 for a definition of which characters need to be escaped.
    return urllib.parse.quote(text, safe='~-._')


def GeneratePermissionUrl(client_id, scope):
    """
    Generates the URL for authorizing access.
    This uses the "OAuth2 for Installed Applications" flow described at
    https://developers.google.com/accounts/docs/OAuth2InstalledApp
    Args:
        client_id: Client ID obtained by registering your app.
        scope: scope for access token, e.g. 'https://mail.google.com'
    Returns:
        A URL that the user should visit in their browser.
    """
    return (
                f"{AccountsUrl('o/oauth2/auth')}?"
                f"client_id={UrlEscape(client_id)}&"
                f"redirect_uri={UrlEscape(REDIRECT_URI)}&"
                 "response_type=code&"
                f"scope={scope}"
    )


def AuthorizeTokens(client_id, client_secret, authorization_code):
    """
    Obtains OAuth access token and refresh token.
    This uses the application portion of the "OAuth2 for Installed Applications"
    flow at https://developers.google.com/accounts/docs/OAuth2InstalledApp#handlingtheresponse
    Args:
        client_id: Client ID obtained by registering your app.
        client_secret: Client secret obtained by registering your app.
        authorization_code: code generated by Google Accounts after user grants
            permission.
    Returns:
        The decoded response from the Google Accounts server, as a dict. Expected
        fields include 'access_token', 'expires_in', and 'refresh_token'.
    """
    request_url = AccountsUrl('o/oauth2/token')
    params = {}
    params['client_id'] = client_id
    params['client_secret'] = client_secret
    params['code'] = authorization_code
    params['grant_type'] = 'authorization_code'
    params['redirect_uri'] = REDIRECT_URI

    data = urllib.parse.urlencode(params)
    data = data.encode('utf-8') # data should be bytes
    request = urllib.request.Request(request_url, data)
    response = urllib.request.urlopen(request).read()
    return json.loads(response)


def RefreshToken(client_id, client_secret, refresh_token):
    """
    Obtains a new token given a refresh token.
    See https://developers.google.com/accounts/docs/OAuth2InstalledApp#refresh
    Args:
        client_id: Client ID obtained by registering your app.
        client_secret: Client secret obtained by registering your app.
        refresh_token: A previously-obtained refresh token.
    Returns:
        The decoded response from the Google Accounts server, as a dict. Expected
        fields include 'access_token', 'expires_in', and 'refresh_token'.
    """
    request_url = AccountsUrl('o/oauth2/token')
    params = {}
    params['client_id'] = client_id
    params['client_secret'] = client_secret
    params['grant_type'] = 'refresh_token'
    params['refresh_token'] = refresh_token

    data = urllib.parse.urlencode(params)
    data = data.encode('utf-8') # data should be bytes
    request = urllib.request.Request(request_url, data)
    response = urllib.request.urlopen(request).read()
    return json.loads(response)


def main(argv):
    argument_parser = SetupArgumentParser()
    args = argument_parser.parse_args()
    if args.refresh_token:
        response = RefreshToken(args.client_id, args.client_secret,
                                args.refresh_token)
        print(
                f"Access Token: {response['access_token']}\n"
                f"Access Token Expiration Seconds: {response['expires_in']}"
        )
    elif args.generate_oauth2_token:
        print(
                 "Visit this url and follow the directions:\n"
                f"  {GeneratePermissionUrl(args.client_id, args.scope)}"
        )
        authorization_code = input('Enter verification code: ')
        response = AuthorizeTokens(args.client_id, args.client_secret,
                                   authorization_code)
        print(
                f"Refresh Token: {response['refresh_token']}\n"
                f"Access Token: {response['access_token']}\n"
                f"Access Token Expiration Seconds: {response['expires_in']}"
        )


if __name__ == '__main__':
    main(sys.argv)
